<script>
	// @ts-nocheck
	import { applyMarkdownStyling } from '$lib/components/HelperFunctions';
	import { marked } from 'marked';
	import DOMPurify from 'dompurify';
	import { browser } from '$app/environment';
	import { onMount, onDestroy } from 'svelte';
	import BreadCrumb from '$lib/components/BreadCrumb.svelte';
	import 'easymde/dist/easymde.min.css';

	export let data;
	let breadcrumbItems = [];
	let resource = null;

	onMount(() => {
		data.resourceData.then((res) => {
			resource = res;
			breadcrumbItems = [
				{ name: 'Home', href: '../../../' },
				{ name: 'Study', href: '../../' },
				{ name: `${resource.collectionName}`, href: `../` },
				{ name: `${resource.name}`, href: `./` },
				{ name: `Generate Note`, href: `` }
			];
		});
	});

	let prompt = '';
	let generatedNote = '';
	let isLoading = false;
	let jsPDF;
	let html2canvas;

	let easyMDE;
	let EasyMDE;
	let editorInitialized = false;

	onMount(async () => {
		const jsPDFModule = await import('jspdf');
		const html2canvasModule = await import('html2canvas');
		jsPDF = jsPDFModule.default;
		html2canvas = html2canvasModule.default;

		if (browser) {
			const EasyMDEModule = await import('easymde');
			EasyMDE = EasyMDEModule.default;
		}
	});

	onDestroy(() => {
		if (browser && easyMDE) {
			easyMDE.toTextArea();
			easyMDE = null;
		}
	});

	function initializeEditor() {
		if (browser && EasyMDE && !editorInitialized) {
			easyMDE = new EasyMDE({
				element: document.getElementById('my-text-area'),
				spellChecker: false,
				autosave: {
					enabled: true,
					uniqueId: 'generatedNote',
					delay: 1000
				},
				renderingConfig: {
					singleLineBreaks: false,
					codeSyntaxHighlighting: true
				},
				status: ['autosave', 'lines', 'words', 'cursor'],
				sideBySideFullscreen: false
			});

			if (editableMarkdown) {
				easyMDE.value(editableMarkdown);
			}

			easyMDE.codemirror.on('change', () => {
				editableMarkdown = easyMDE.value();
				sanitizedHtml = DOMPurify.sanitize(marked(editableMarkdown));
			});

			editorInitialized = true;
		}
	}

	$: if (generatedNote) {
		// This will run after the component has updated
		setTimeout(initializeEditor, 0);
	}

	// Assume this is passed from the previous page or stored in a store
	let chosenDataSource = 'Intro to ML';
	let editableMarkdown = '';

	async function generateNote() {
		if (!prompt) {
			alert('Prompt is empty');
			return;
		}

		isLoading = true;

		// Simulating an API call
		await new Promise((resolve) => setTimeout(resolve, 150));

		// For demonstration, we'll generate a mock note
		generatedNote = `# Generated Note

## Prompt: "${prompt}"
## Data Source: ${chosenDataSource}

This is a sample generated note based on your prompt. In a real application, this content would be dynamically generated based on the prompt and the chosen data source.

### Key Points:
1. Point one about the topic
2. Point two exploring another aspect
3. Additional information related to the prompt

### Summary:
This section would contain a brief summary of the generated note, tying together the main ideas presented above.

---

*Note: This is a placeholder. Actual generated content would be more detailed and directly related to the given prompt.*`;

		isLoading = false;

		// After generating the note, set it as the editable markdown
		editableMarkdown = generatedNote;
		if (browser && easyMDE) {
			easyMDE.value(editableMarkdown);
		}
	}

	async function downloadPDF() {
		if (!jsPDF) {
			console.error('PDF generation library is not loaded yet');
			return;
		}

		const pdf = new jsPDF('p', 'pt', 'a4');

		// Apply the markdown styling
		applyMarkdownStyling(pdf, editableMarkdown);

		pdf.save('generated_note.pdf');
	}

	$: sanitizedHtml = DOMPurify.sanitize(marked(editableMarkdown));
</script>

<div class="font-poppins container mx-auto px-4 py-12">
	{#if resource}
		<BreadCrumb bind:items={breadcrumbItems} />
		<div class="mx-auto max-w-3xl">
			<div class="relative mb-20">
				<!-- Tilted background box -->
				<div class="absolute inset-0 translate-x-4 translate-y-4 -rotate-3 transform">
					<div
						class="h-full w-full rounded-xl bg-gradient-to-br from-blue-300 to-indigo-300 shadow-xl"
					></div>
				</div>

				<!-- Main content box -->
				<div
					class="relative overflow-hidden rounded-xl border border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-100 shadow-2xl"
				>
					<div class="px-8 py-10">
						<h1
							class="mb-8 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-4xl font-extrabold text-transparent"
						>
							Generate Notes
						</h1>
						<div class="space-y-8">
							<div>
								<label for="prompt" class="mb-2 block text-sm font-semibold text-gray-700">
									Prompt
								</label>
								<textarea
									bind:value={prompt}
									class="w-full rounded-lg border-2 border-blue-300 px-4 py-3 text-gray-900 shadow-sm transition duration-200 ease-in-out focus:border-transparent focus:ring-2 focus:ring-blue-500 sm:text-sm"
									placeholder="Enter your prompt here"
									rows="4"
								></textarea>
							</div>
							<div>
								<label class="mb-2 block text-sm font-semibold text-gray-700"> Data Source </label>
								<p
									class="rounded-md border border-gray-200 bg-white px-4 py-2 text-sm text-gray-600 shadow-sm"
								>
									{chosenDataSource}
								</p>
							</div>
							<div>
								<button
									on:click={generateNote}
									class="flex w-full items-center justify-center rounded-full border border-transparent bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-3 text-base font-medium text-white transition duration-200 ease-in-out hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
								>
									{#if isLoading}
										<svg
											class="-ml-1 mr-3 h-5 w-5 animate-spin text-white"
											xmlns="http://www.w3.org/2000/svg"
											fill="none"
											viewBox="0 0 24 24"
										>
											<circle
												class="opacity-25"
												cx="12"
												cy="12"
												r="10"
												stroke="currentColor"
												stroke-width="4"
											></circle>
											<path
												class="opacity-75"
												fill="currentColor"
												d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
											></path>
										</svg>
										Generating...
									{:else}
										Generate Note
									{/if}
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>

			{#if generatedNote}
				<div class="mt-8 overflow-hidden rounded-lg bg-white shadow-lg">
					<div class="px-6 py-8">
						<div class="mb-6 flex items-center justify-between">
							<h2 class="text-2xl font-bold text-gray-900">Generated Note</h2>
							<button
								on:click={downloadPDF}
								class="rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
							>
								Download PDF
							</button>
						</div>
						<div class="flex space-x-4">
							<div class="w-full">
								<!-- <h3 class="mb-2 text-lg font-semibold">Edit Markdown</h3> -->
								<textarea id="my-text-area" />
							</div>
						</div>
					</div>
				</div>
			{/if}
		</div>
	{:else}
		<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform">
			<div
				class="spinner h-12 w-12 animate-spin rounded-full border-4 border-indigo-500 border-t-transparent"
			></div>
		</div>
	{/if}
</div>

<style>
	/* Styles for EasyMDE preview */
	:global(.EasyMDEContainer .editor-preview),
	:global(.EasyMDEContainer .editor-preview-side) {
		background-color: white;
		padding: 1rem;
		color: #333;
	}

	:global(.EasyMDEContainer .editor-preview h1),
	:global(.EasyMDEContainer .editor-preview-side h1) {
		font-size: 2em;
		font-weight: bold;
		margin-top: 0.67em;
		margin-bottom: 0.67em;
		border-bottom: 1px solid #eaecef;
	}

	:global(.EasyMDEContainer .editor-preview h2),
	:global(.EasyMDEContainer .editor-preview-side h2) {
		font-size: 1.5em;
		font-weight: bold;
		margin-top: 0.83em;
		margin-bottom: 0.83em;
		border-bottom: 1px solid #eaecef;
	}

	:global(.EasyMDEContainer .editor-preview h3),
	:global(.EasyMDEContainer .editor-preview-side h3) {
		font-size: 1.25em;
		font-weight: bold;
		margin-top: 1em;
		margin-bottom: 1em;
	}

	:global(.EasyMDEContainer .editor-preview ul),
	:global(.EasyMDEContainer .editor-preview-side ul) {
		list-style-type: disc;
		padding-left: 2em;
		margin-top: 1em;
		margin-bottom: 1em;
	}

	:global(.EasyMDEContainer .editor-preview ol),
	:global(.EasyMDEContainer .editor-preview-side ol) {
		list-style-type: decimal;
		padding-left: 2em;
		margin-top: 1em;
		margin-bottom: 1em;
	}

	:global(.EasyMDEContainer .editor-preview p),
	:global(.EasyMDEContainer .editor-preview-side p) {
		margin-top: 1em;
		margin-bottom: 1em;
	}

	:global(.EasyMDEContainer .editor-preview code),
	:global(.EasyMDEContainer .editor-preview-side code) {
		background-color: rgba(27, 31, 35, 0.05);
		border-radius: 3px;
		font-size: 85%;
		padding: 0.2em 0.4em;
	}

	:global(.EasyMDEContainer .editor-preview pre),
	:global(.EasyMDEContainer .editor-preview-side pre) {
		background-color: #f6f8fa;
		border-radius: 3px;
		font-size: 85%;
		line-height: 1.45;
		overflow: auto;
		padding: 16px;
	}
</style>
